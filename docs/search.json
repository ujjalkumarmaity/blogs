[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blogs",
    "section": "",
    "text": "Coming Soon"
  },
  {
    "objectID": "nlp/spacy.html",
    "href": "nlp/spacy.html",
    "title": "Spacy",
    "section": "",
    "text": "spacy is open source library for NLP in python.\nSome Feature\n\nTokenization : split text into words, pancutation mark etc.\nPart-of-Speech Tagging : assign grammertical label to each token.\nNamed Entity Recognition (NER) - spacy can identify named entity in text. such as people name, ORG name\nDependency Parsing - Dependency parsing is the process of extracting the dependency parse of a sentence to represent its grammatical structure.\nLemmatization - transform word into root word is called a lemma\nSentence Boundary Detection(SBD) - finding and segmenting individual sentence\nEntity Linking (EL) -\nSimilarity - Comparing word, text span and document and how they similar to each other\nEule-based matching1 -\nTraining -\n\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\")"
  },
  {
    "objectID": "nlp/spacy.html#spacy",
    "href": "nlp/spacy.html#spacy",
    "title": "Spacy",
    "section": "",
    "text": "spacy is open source library for NLP in python.\nSome Feature\n\nTokenization : split text into words, pancutation mark etc.\nPart-of-Speech Tagging : assign grammertical label to each token.\nNamed Entity Recognition (NER) - spacy can identify named entity in text. such as people name, ORG name\nDependency Parsing - Dependency parsing is the process of extracting the dependency parse of a sentence to represent its grammatical structure.\nLemmatization - transform word into root word is called a lemma\nSentence Boundary Detection(SBD) - finding and segmenting individual sentence\nEntity Linking (EL) -\nSimilarity - Comparing word, text span and document and how they similar to each other\nEule-based matching1 -\nTraining -\n\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\")"
  },
  {
    "objectID": "nlp/spacy.html#tokenization",
    "href": "nlp/spacy.html#tokenization",
    "title": "Spacy",
    "section": "Tokenization",
    "text": "Tokenization\ntext = \"spaCy is an open-source software library for advanced natural language processing\"\nfor i in nlp(text):\n    print(i.text)\nspaCy\nis\nan\nopen\n-\nsource\nsoftware\nlibrary\nfor\nadvanced\nnatural\nlanguage\nprocessing"
  },
  {
    "objectID": "nlp/spacy.html#part-of-speech-tagging",
    "href": "nlp/spacy.html#part-of-speech-tagging",
    "title": "Spacy",
    "section": "Part-of-Speech Tagging",
    "text": "Part-of-Speech Tagging\nassign grammertical label to each token.\nhttps://universaldependencies.org/u/pos/\ntag_ represents the detailed part-of-speech tag assigned to the token, which includes more specific information about the word’s grammatical properties. EX - “NN” for a noun or “VB” for a verb.\npos_ it provides more general categorization of the word part of speech. ex - NOUN\nimport pandas as pd\ntext = \"spaCy is an open-source software library for advanced natural language processing\"\nl =[]\nfor token in nlp(text):\n    l.append([token.text,token.pos_,token.tag_,spacy.explain(token.tag_),token.dep_, token.shape_, token.is_alpha])\n    #print(token.text,'-&gt;',token.pos_,'-&gt;',token.tag_,spacy.explain(token.tag_),token.dep_, token.shape_, token.is_alpha)\npd.DataFrame(l,columns = ['tect','pos_','tag_','explain_tag','dep_','shape_','is_alpha'])    \n\n\n\n\n\n\n\n\n\ntect\n\n\npos_\n\n\ntag_\n\n\nexplain_tag\n\n\ndep_\n\n\nshape_\n\n\nis_alpha\n\n\n\n\n\n\n0\n\n\nspaCy\n\n\nINTJ\n\n\nUH\n\n\ninterjection\n\n\nnsubj\n\n\nxxxXx\n\n\nTrue\n\n\n\n\n1\n\n\nis\n\n\nAUX\n\n\nVBZ\n\n\nverb, 3rd person singular present\n\n\nROOT\n\n\nxx\n\n\nTrue\n\n\n\n\n2\n\n\nan\n\n\nDET\n\n\nDT\n\n\ndeterminer\n\n\ndet\n\n\nxx\n\n\nTrue\n\n\n\n\n3\n\n\nopen\n\n\nADJ\n\n\nJJ\n\n\nadjective (English), other noun-modifier (Chin…\n\n\namod\n\n\nxxxx\n\n\nTrue\n\n\n\n\n4\n\n\n-\n\n\nPUNCT\n\n\nHYPH\n\n\npunctuation mark, hyphen\n\n\npunct\n\n\n-\n\n\nFalse\n\n\n\n\n5\n\n\nsource\n\n\nNOUN\n\n\nNN\n\n\nnoun, singular or mass\n\n\ncompound\n\n\nxxxx\n\n\nTrue\n\n\n\n\n6\n\n\nsoftware\n\n\nNOUN\n\n\nNN\n\n\nnoun, singular or mass\n\n\ncompound\n\n\nxxxx\n\n\nTrue\n\n\n\n\n7\n\n\nlibrary\n\n\nNOUN\n\n\nNN\n\n\nnoun, singular or mass\n\n\nattr\n\n\nxxxx\n\n\nTrue\n\n\n\n\n8\n\n\nfor\n\n\nADP\n\n\nIN\n\n\nconjunction, subordinating or preposition\n\n\nprep\n\n\nxxx\n\n\nTrue\n\n\n\n\n9\n\n\nadvanced\n\n\nADJ\n\n\nJJ\n\n\nadjective (English), other noun-modifier (Chin…\n\n\namod\n\n\nxxxx\n\n\nTrue\n\n\n\n\n10\n\n\nnatural\n\n\nADJ\n\n\nJJ\n\n\nadjective (English), other noun-modifier (Chin…\n\n\namod\n\n\nxxxx\n\n\nTrue\n\n\n\n\n11\n\n\nlanguage\n\n\nNOUN\n\n\nNN\n\n\nnoun, singular or mass\n\n\ncompound\n\n\nxxxx\n\n\nTrue\n\n\n\n\n12\n\n\nprocessing\n\n\nNOUN\n\n\nNN\n\n\nnoun, singular or mass\n\n\npobj\n\n\nxxxx\n\n\nTrue"
  },
  {
    "objectID": "nlp/spacy.html#dependency-parsing",
    "href": "nlp/spacy.html#dependency-parsing",
    "title": "Spacy",
    "section": "Dependency Parsing",
    "text": "Dependency Parsing\nIt analyzes the syntactic structure of a sentence and assigns grammatical relationships between words, creating a parse tree representation\nfrom spacy import displacy\ntext = \"spaCy is an open-source software library for advanced natural language processing\"\ndoc = nlp(text)\noptions = {\"compact\":True, \"distance\":100, \"bg\":\"#0095b6\", \"color\":\"#DDDDDD\", \"font\":\"Source Sans Pro\"}\ndisplacy.render(doc, style='dep', jupyter=True,)\n  spaCy INTJ \n is AUX \n an DET \n open- ADJ \n source NOUN \n software NOUN \n library NOUN \n for ADP \n advanced ADJ \n natural ADJ \n language NOUN \n processing NOUN \n   nsubj   \n   det   \n   amod   \n   compound   \n   compound   \n   attr   \n   prep   \n   amod   \n   amod   \n   compound   \n   pobj"
  },
  {
    "objectID": "nlp/spacy.html#sentence-boundary-detectionsbd",
    "href": "nlp/spacy.html#sentence-boundary-detectionsbd",
    "title": "Spacy",
    "section": "Sentence Boundary Detection(SBD)",
    "text": "Sentence Boundary Detection(SBD)\nfinding start and end of the sentence\nsent = \"Processing raw text intelligently is difficult: most words are rare, and it’s common for words that look completely different to mean almost the same thing. The same words in a different order can mean something completely different. Even splitting text into useful word-like units can be difficult in many languages. \"\ndoc = nlp(sent)\nprint(\"No of Sentence\" , len(list(doc.sents)))\nfor i in doc.sents:\n    print(i)\nNo of Sentence 3\nProcessing raw text intelligently is difficult: most words are rare, and it’s common for words that look completely different to mean almost the same thing.\nThe same words in a different order can mean something completely different.\nEven splitting text into useful word-like units can be difficult in many languages."
  },
  {
    "objectID": "nlp/spacy.html#lemmatization-stemming",
    "href": "nlp/spacy.html#lemmatization-stemming",
    "title": "Spacy",
    "section": "Lemmatization & Stemming",
    "text": "Lemmatization & Stemming\nLemmatization considers the context and converts the word to its meaningful base form, which is called Lemma\nStemming is a process that stems or removes last few characters from a word, often leading to incorrect meanings and spelling\nimport nltk\nnltk.download('wordnet')\nnltk.download('omw-1.4')\n[nltk_data] Downloading package omw-1.4 to\n[nltk_data]     C:\\Users\\ujjal\\AppData\\Roaming\\nltk_data...\n\n\n\n\n\nTrue\nfrom nltk.stem import PorterStemmer,WordNetLemmatizer\ntext = \"spaCy is an open-source software library for advanced natural language processing\"\nst = PorterStemmer()\nlema = WordNetLemmatizer()\nfor token in nlp(text):\n    print(token.text,'-&gt;',st.stem(token.text),lema.lemmatize(token.text),token.lemma_)\nspaCy -&gt; spaci spaCy spacy\nis -&gt; is is be\nan -&gt; an an an\nopen -&gt; open open open\n- -&gt; - - -\nsource -&gt; sourc source source\nsoftware -&gt; softwar software software\nlibrary -&gt; librari library library\nfor -&gt; for for for\nadvanced -&gt; advanc advanced advanced\nnatural -&gt; natur natural natural\nlanguage -&gt; languag language language\nprocessing -&gt; process processing processing"
  },
  {
    "objectID": "nlp/spacy.html#named-entity-recognition-ner",
    "href": "nlp/spacy.html#named-entity-recognition-ner",
    "title": "Spacy",
    "section": "Named Entity Recognition (NER)",
    "text": "Named Entity Recognition (NER)\nspaCy features an extremely fast statistical entity recognition system, that assigns labels to contiguous spans of tokens. The default trained pipelines can identify a variety of named and numeric entities, including companies, locations, organizations and products.\n\n\n\nimage.png\n\n\nsent = \"\"\"\nWe are looking for 8-10 years experienced DotNet Developer, JOB CODE - RDNLD2\n\nJob Description\n\n Candidates with 8+ years of experience in IT industry and with strong .Net/.Net\n\nCore/Azure Cloud Service/ Azure DevOps.\n\n Working hours – 8 hours , with a few hours of overlap during EST Time zone.\n\n Expertise in working with Microsoft Technologies like C#, .Net Core , WEB API,\n\nASP.Net MVC, ADO.Net, Entity Framework, IIS, Git\n\n Hands on experience in Azure development , worked on Azure Web application,\n\nApp Service, Azure Storage, Azure SQL database and Azure AD\n\n Expertise in Microsoft Azure Cloud Service , Application Insights, Azure\n\nMonitoring, KeyVault and SQL Azure.\n\n Hands on experience in building and deploying applications by adopting Azure\n\nDevOps practices such as Continuous Integration (CI) and Continuous\n\nDeployment (CD) in runtime with Git, Docker, Kubernetes and managing Azure\n\nCloud Services.\n\n Expertise in RDBMS including MS SQL Server with thorough knowledge in writing\n\nSQL queries, Stored Procedures, Views, Functions, Packages, Cursors &amp; tables\n\nand objects types.\n\n Good knowledge of JavaScript, React JS, jQuery, Angular,, and other languages\n\n Knowledge of architectural styles and design patterns, , experience in designing\n\nsolutions\n\n Broad and extensive knowledge of the software development life cycle (SDLC)\n\nwith software development models like Agile, Scrum model, Jira models.\n\n Designing, developing and executing software solutions to address business\n\nissues\n\n Strong debugging and problem-solving skills\n\n Manage, coordinate and support development team throughout the process\n\n Perform object-oriented programming, data modelling and database creation.\n\n Experience in Stakeholder Management (client facing roles)\n\n Excellent communication and organizational skills\n\n\n\n﻿Responsibilities\n\n Develop high-quality software design and architecture\n\n Identify, prioritize and execute tasks in the software development life cycle\n\n Guide team to write reusable, testable, performant and efficient code\n\n Work with the team to define, design, and deliver on new features\n\n Lead by example by designing and implementing clean best-practices\n\nmaintainable code\n\n Experience in large scale software development.\n\nPrimary Skills\n\n Expertise in C#, .Net Core, Entity framework, EF core, Microservices, Azure Cloud\n\nservices, Azure DevOps\n\n Expertise in RDBMS including MS SQL Server with thorough knowledge in writing\n\nSQL queries, Stored Procedures\n\nSoft Skills\n\n Team Management\n\n Communication Skills\n\n Documentation skills\n\n Leadership and ownership quality\n\n Mentor junior team members\n\n\n\n\"\"\"\n#label is hash value\n# sent = \"spaCy is an open-source software library for advanced natural language processing\"\n# sent = \"Apple is looking at buying San Francisco startup \"\ndoc = nlp(sent)\nfor ent in doc.ents:\n    print(ent.text,ent.label_,ent.start_char,ent.label)\n8-10 years DATE 20 391\nDotNet Developer ORG 43 383\n8+ years DATE 115 391\nWorking hours TIME 223 392\n8 hours TIME 239 392\na few hours TIME 254 392\nEST Time LOC 284 385\nExpertise GPE 302 384\nMicrosoft Technologies ORG 328 383\nMVC ORG 390 383\nEntity Framework PERSON 404 380\nGit PERSON 427 380\nAzure Storage ORG 524 383\nExpertise GPE 574 384\nMicrosoft Azure Cloud Service ORG 587 383\nKeyVault ORG 660 383\nSQL Azure ORG 673 383\nDevOps ORG 765 383\nContinuous Integration ORG 790 383\nCI ORG 814 383\nContinuous\n\nDeployment ORG 822 383\nGit GPE 866 384\nDocker GPE 871 384\nKubernetes ORG 879 383\nExpertise GPE 929 384\nMS SQL Server ORG 958 383\nSQL ORG 1008 383\nStored Procedures PERSON 1021 380\nViews ORG 1040 383\nFunctions PERSON 1047 380\nPackages, Cursors & ORG 1058 383\nJavaScript PRODUCT 1130 386\nBroad ORG 1288 383\nAgile ORG 1403 383\nJira PERSON 1423 380\nManage PRODUCT 1572 386\nStakeholder Management ORG 1738 383\nDevelop ORG 1860 383\nIdentify ORG 1917 383\nGuide ORG 1998 383\nPrimary Skills PERSON 2278 380\nExpertise GPE 2405 384\nMS SQL Server ORG 2434 383\nSQL ORG 2484 383\nSoft Skills PERSON 2516 380\nTeam Management ORG 2531 383\nDocumentation PRODUCT 2574 386\nLeadership NORP 2598 381\nMentor LOC 2634 385\nfrom spacy import displacy\ndisplacy.render(doc,style= \"ent\",jupyter=True )\n\n\nWe are looking for  8-10 years DATE  experienced  DotNet Developer ORG  , JOB CODE - RDNLD2Job Description Candidates with  8+ years DATE  of experience in IT industry and with strong .Net/.NetCore/Azure Cloud Service/ Azure DevOps.  Working hours TIME  –  8 hours TIME  , with  a few hours TIME  of overlap during  EST Time LOC  zone.  Expertise GPE  in working with  Microsoft Technologies ORG  like C#, .Net Core , WEB API,ASP.Net  MVC ORG  , ADO.Net,  Entity Framework PERSON  , IIS,  Git PERSON   Hands on experience in Azure development , worked on Azure Web application,App Service,  Azure Storage ORG  , Azure SQL database and Azure AD  Expertise GPE  in  Microsoft Azure Cloud Service ORG  , Application Insights, AzureMonitoring,  KeyVault ORG  and  SQL Azure ORG  . Hands on experience in building and deploying applications by adopting Azure  DevOps ORG  practices such as  Continuous Integration ORG  (  CI ORG  ) and  Continuous\nDeployment ORG  (CD) in runtime with  Git GPE  ,  Docker GPE  ,  Kubernetes ORG  and managing AzureCloud Services.  Expertise GPE  in RDBMS including  MS SQL Server ORG  with thorough knowledge in writing  SQL ORG  queries,  Stored Procedures PERSON  ,  Views ORG  ,  Functions PERSON  ,  Packages, Cursors & ORG  amp; tablesand objects types. Good knowledge of  JavaScript PRODUCT  , React JS, jQuery, Angular,, and other languages Knowledge of architectural styles and design patterns, , experience in designingsolutions  Broad ORG  and extensive knowledge of the software development life cycle (SDLC)with software development models like  Agile ORG  , Scrum model,  Jira PERSON  models. Designing, developing and executing software solutions to address businessissues Strong debugging and problem-solving skills  Manage PRODUCT  , coordinate and support development team throughout the process Perform object-oriented programming, data modelling and database creation. Experience in  Stakeholder Management ORG  (client facing roles) Excellent communication and organizational skills﻿Responsibilities  Develop ORG  high-quality software design and architecture  Identify ORG  , prioritize and execute tasks in the software development life cycle  Guide ORG  team to write reusable, testable, performant and efficient code Work with the team to define, design, and deliver on new features Lead by example by designing and implementing clean best-practicesmaintainable code Experience in large scale software development.  Primary Skills PERSON   Expertise in C#, .Net Core, Entity framework, EF core, Microservices, Azure Cloudservices, Azure DevOps  Expertise GPE  in RDBMS including  MS SQL Server ORG  with thorough knowledge in writing  SQL ORG  queries, Stored Procedures  Soft Skills PERSON    Team Management ORG   Communication Skills  Documentation PRODUCT  skills  Leadership NORP  and ownership quality  Mentor LOC  junior team members"
  },
  {
    "objectID": "python/python_advance.html",
    "href": "python/python_advance.html",
    "title": "Python Advance",
    "section": "",
    "text": "Lambda is a keyword in Python used to define functions, more specifically Anonymous Functions lambda arguments: expression\nsum_fun = lambda a,b : a+b\nsum_fun(2,3)\n5"
  },
  {
    "objectID": "python/python_advance.html#inheritance",
    "href": "python/python_advance.html#inheritance",
    "title": "Python Advance",
    "section": "Inheritance",
    "text": "Inheritance\nInheritance allows us to define a class that inherits all the methods and properties from another class.\nParent class is the class being inherited from, also called base class.\nChild class is the class that inherits from another class, also called derived class.\nWhen you add the __init__() function, the child class will no longer inherit the parent’s __init__() function.\nclass Student(Person):\n  def __init__(self, fname, lname):\nTo keep the inheritance of the parent’s __init__() function, add a call to the parent’s __init__() function:\nclass Student(Person):\n  def __init__(self, fname, lname):\n    Person.__init__(self, fname, lname)\nsuper() function that will make the child class inherit all the methods and properties from its parent\nclass Student(Person):\n  def __init__(self, fname, lname):\n    super().__init__(fname, lname)\nclass Person:\n    def __init__(self, fname, lname):\n        self.firstname = fname\n        self.lastname = lname\n\n    def printname(self):\n        print(self.firstname, self.lastname)\n\nclass Student(Person):\n    def __init__(self, fname, lname, year):\n        super().__init__(fname, lname)\n        self.graduationyear = year\n\n    def printstd(self):\n        print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)\n\nx = Student(\"Mike\", \"Olsen\", 2023)\nx.printstd()\nWelcome Mike Olsen to the class of 2023"
  }
]